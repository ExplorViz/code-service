<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" url="\certs">

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="certs/blacklist.c" hash="0a9e597d1b56059b7b9a5b09c25d442396c81440"><comment type="line">// SPDX-License-Identifier: GPL-2.0-or-later</comment>
<comment type="block">/* System hash blacklist.
 *
 * Copyright (C) 2016 Red Hat, Inc. All Rights Reserved.
 * Written by David Howells (dhowells@redhat.com)
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pr_fmt</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"blacklist: "fmt</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/slab.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/key.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/key-type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/sched.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/seq_file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/uidgid.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;keys/asymmetric-type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;keys/system_keyring.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blacklist.h"</cpp:file></cpp:include>

<comment type="block">/*
 * According to crypto/asymmetric_keys/x509_cert_parser.c:x509_note_pkey_algo(),
 * the size of the currently longest supported hash algorithm is 512 bits,
 * which translates into 128 hex characters.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HASH_LEN</name></cpp:macro>	<cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLACKLIST_KEY_PERM</name></cpp:macro> <cpp:value>(KEY_POS_SEARCH | KEY_POS_VIEW | \
			    KEY_USR_SEARCH | KEY_USR_VIEW)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>tbs_prefix</name><index>[]</index></name> <init>= <expr><literal type="string">"tbs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bin_prefix</name><index>[]</index></name> <init>= <expr><literal type="string">"bin"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>blacklist_keyring</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONFIG_SYSTEM_REVOCATION_LIST</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>extern</specifier> <name>__initconst</name> <specifier>const</specifier> <name>u8</name></type> <name><name>revocation_certificate_list</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>__initconst</name> <specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>revocation_certificate_list_size</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * The description must be a type prefix, a colon and then an even number of
 * hex digits.  The hash is kept in the description.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>blacklist_vet_description</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>prefix_len</name></decl>, <decl><type ref="prev"/><name>tbs_step</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bin_step</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* The following algorithm only works if prefix lengths match. */</comment>
	<expr_stmt><expr><call><name>BUILD_BUG_ON</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbs_prefix</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bin_prefix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>prefix_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tbs_prefix</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>desc</name></expr>;</condition> <incr><expr><name>desc</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>desc</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>tbs_step</name> <operator>==</operator> <name>prefix_len</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>found_colon</name>;</goto></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>bin_step</name> <operator>==</operator> <name>prefix_len</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>found_colon</name>;</goto></block_content></block></if></if_stmt>
			<return>return <expr><operator>-</operator><name>EINVAL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>prefix_len</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>desc</name> <operator>==</operator> <name><name>tbs_prefix</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>tbs_step</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>desc</name> <operator>==</operator> <name><name>bin_prefix</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>bin_step</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><operator>-</operator><name>EINVAL</name></expr>;</return>

<label><name>found_colon</name>:</label>
	<expr_stmt><expr><name>desc</name><operator>++</operator></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>desc</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>MAX_HASH_LEN</name></expr>;</condition> <incr><expr><name>desc</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isxdigit</name><argument_list>(<argument><expr><operator>*</operator><name>desc</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isupper</name><argument_list>(<argument><expr><operator>*</operator><name>desc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* The hash is greater than MAX_HASH_LEN. */</comment>
		<return>return <expr><operator>-</operator><name>ENOPKG</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Checks for an even number of hexadecimal characters. */</comment>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>blacklist_key_instantiate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
		<parameter><decl><type><name><name>struct</name> <name>key_preparsed_payload</name></name> <modifier>*</modifier></type><name>prep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONFIG_SYSTEM_BLACKLIST_AUTH_UPDATE</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Sets safe default permissions for keys loaded by user space. */</comment>
	<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>BLACKLIST_KEY_PERM</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Skips the authentication step for builtin hashes, they are not
	 * signed but still trusted.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>KEY_FLAG_BUILTIN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONFIG_SYSTEM_BLACKLIST_AUTH_UPDATE</name></cpp:ifdef>
	<comment type="block">/*
	 * Verifies the description's PKCS#7 signature against the builtin
	 * trusted keyring.
	 */</comment>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>verify_pkcs7_signature</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>description</name></name></expr></argument>,
			<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>prep</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>prep</name><operator>-&gt;</operator><name>datalen</name></name></expr></argument>,
			<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VERIFYING_UNSPECIFIED_SIGNATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/*
	 * It should not be possible to come here because the keyring doesn't
	 * have KEY_USR_WRITE and the only other way to call this function is
	 * for builtin hashes.
	 */</comment>
	<expr_stmt><expr><call><name>WARN_ON_ONCE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><name>EPERM</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>out</name>:</label>
	<return>return <expr><call><name>generic_key_instantiate</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>prep</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>blacklist_key_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
		<parameter><decl><type><name><name>struct</name> <name>key_preparsed_payload</name></name> <modifier>*</modifier></type><name>prep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>-</operator><name>EPERM</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blacklist_describe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>seq_file</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>seq_puts</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>key_type</name></name></type> <name>key_type_blacklist</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>name</name>			<operator>=</operator> <literal type="string">"blacklist"</literal></expr>,
	<expr><operator>.</operator><name>vet_description</name>	<operator>=</operator> <name>blacklist_vet_description</name></expr>,
	<expr><operator>.</operator><name>instantiate</name>		<operator>=</operator> <name>blacklist_key_instantiate</name></expr>,
	<expr><operator>.</operator><name>update</name>			<operator>=</operator> <name>blacklist_key_update</name></expr>,
	<expr><operator>.</operator><name>describe</name>		<operator>=</operator> <name>blacklist_describe</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_raw_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
		<parameter><decl><type><name><name>enum</name> <name>blacklist_hash_type</name></name></type> <name>hash_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>type_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type_prefix</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>hash_type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>BLACKLIST_HASH_X509_TBS</name></expr>:</case>
		<expr_stmt><expr><name>type_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tbs_prefix</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>type_prefix</name> <operator>=</operator> <name>tbs_prefix</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>BLACKLIST_HASH_BINARY</name></expr>:</case>
		<expr_stmt><expr><name>type_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bin_prefix</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>type_prefix</name> <operator>=</operator> <name>bin_prefix</name></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>WARN_ON_ONCE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>ERR_PTR</name><argument_list>(<argument><expr><operator>-</operator><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>kmalloc</name><argument_list>(<argument><expr><name>type_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>hash_len</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>GFP_KERNEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>ERR_PTR</name><argument_list>(<argument><expr><operator>-</operator><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>type_prefix</name></expr></argument>, <argument><expr><name>type_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>type_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>bin2hex</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>hash_len</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * mark_raw_hash_blacklisted - Add a hash to the system blacklist
 * @hash: The hash as a hex string with a type prefix (eg. "tbs:23aa429783")
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mark_raw_hash_blacklisted</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>key_ref_t</name></type> <name>key</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>key_create</name><argument_list>(<argument><expr><call><name>make_key_ref</name><argument_list>(<argument><expr><name>blacklist_keyring</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
			 <argument><expr><literal type="string">"blacklist"</literal></expr></argument>,
			 <argument><expr><name>hash</name></expr></argument>,
			 <argument><expr><name>NULL</name></expr></argument>,
			 <argument><expr><literal type="number">0</literal></expr></argument>,
			 <argument><expr><name>BLACKLIST_KEY_PERM</name></expr></argument>,
			 <argument><expr><name>KEY_ALLOC_NOT_IN_QUOTA</name> <operator>|</operator>
			 <name>KEY_ALLOC_BUILT_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><name>EEXIST</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pr_warn</name><argument_list>(<argument><expr><literal type="string">"Duplicate blacklisted hash %s\n"</literal></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pr_err</name><argument_list>(<argument><expr><literal type="string">"Problem blacklisting hash %s: %pe\n"</literal></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mark_hash_blacklisted</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
		<parameter><decl><type><name><name>enum</name> <name>blacklist_hash_type</name></name></type> <name>hash_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>get_raw_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>, <argument><expr><name>hash_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mark_raw_hash_blacklisted</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>kfree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * is_hash_blacklisted - Determine if a hash is blacklisted
 * @hash: The hash to be checked as a binary blob
 * @hash_len: The length of the binary hash
 * @hash_type: Type of hash
 */</comment>
<function><type><name>int</name></type> <name>is_hash_blacklisted</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
		<parameter><decl><type><name><name>enum</name> <name>blacklist_hash_type</name></name></type> <name>hash_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>key_ref_t</name></type> <name>kref</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>get_raw_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>, <argument><expr><name>hash_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>kref</name> <operator>=</operator> <call><name>keyring_search</name><argument_list>(<argument><expr><call><name>make_key_ref</name><argument_list>(<argument><expr><name>blacklist_keyring</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
			      <argument><expr><operator>&amp;</operator><name>key_type_blacklist</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_ERR</name><argument_list>(<argument><expr><name>kref</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>key_ref_put</name><argument_list>(<argument><expr><name>kref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><name>EKEYREJECTED</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>kfree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><call><name>EXPORT_SYMBOL_GPL</name><argument_list>(<argument><expr><name>is_hash_blacklisted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type> <name>is_binary_blacklisted</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>is_hash_blacklisted</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>, <argument><expr><name>BLACKLIST_HASH_BINARY</name></expr></argument>)</argument_list></call> <operator>==</operator>
			<operator>-</operator><name>EKEYREJECTED</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><name>EPERM</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><call><name>EXPORT_SYMBOL_GPL</name><argument_list>(<argument><expr><name>is_binary_blacklisted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONFIG_SYSTEM_REVOCATION_LIST</name></cpp:ifdef>
<comment type="block" format="doxygen">/**
 * add_key_to_revocation_list - Add a revocation certificate to the blacklist
 * @data: The data blob containing the certificate
 * @size: The size of data blob
 */</comment>
<function><type><name>int</name></type> <name>add_key_to_revocation_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>key_ref_t</name></type> <name>key</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>key_create_or_update</name><argument_list>(<argument><expr><call><name>make_key_ref</name><argument_list>(<argument><expr><name>blacklist_keyring</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><literal type="string">"asymmetric"</literal></expr></argument>,
				   <argument><expr><name>NULL</name></expr></argument>,
				   <argument><expr><name>data</name></expr></argument>,
				   <argument><expr><name>size</name></expr></argument>,
				   <argument><expr><name>KEY_POS_VIEW</name> <operator>|</operator> <name>KEY_POS_READ</name> <operator>|</operator> <name>KEY_POS_SEARCH</name>
				   <operator>|</operator> <name>KEY_USR_VIEW</name></expr></argument>,
				   <argument><expr><name>KEY_ALLOC_NOT_IN_QUOTA</name> <operator>|</operator> <name>KEY_ALLOC_BUILT_IN</name>
				   <operator>|</operator> <name>KEY_ALLOC_BYPASS_RESTRICTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>pr_err</name><argument_list>(<argument><expr><literal type="string">"Problem with revocation key (%ld)\n"</literal></expr></argument>, <argument><expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * is_key_on_revocation_list - Determine if the key for a PKCS#7 message is revoked
 * @pkcs7: The PKCS#7 message to check
 */</comment>
<function><type><name>int</name></type> <name>is_key_on_revocation_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pkcs7_message</name></name> <modifier>*</modifier></type><name>pkcs7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pkcs7_validate_trust</name><argument_list>(<argument><expr><name>pkcs7</name></expr></argument>, <argument><expr><name>blacklist_keyring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><name>EKEYREJECTED</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>-</operator><name>ENOKEY</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>restrict_link_for_blacklist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>dest_keyring</name></decl></parameter>,
		<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>key_type</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>union</name> <name>key_payload</name></name> <modifier>*</modifier></type><name>payload</name></decl></parameter>,
		<parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>restrict_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <operator>&amp;</operator><name>key_type_blacklist</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>-</operator><name>EOPNOTSUPP</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialise the blacklist
 *
 * The blacklist_init() function is registered as an initcall via
 * device_initcall().  As a result if the blacklist_init() function fails for
 * any reason the kernel continues to execute.  While cleanly returning -ENODEV
 * could be acceptable for some non-critical kernel parts, if the blacklist
 * keyring fails to load it defeats the certificate/key based deny list for
 * signed modules.  If a critical piece of security functionality that users
 * expect to be present fails to initialize, panic()ing is likely the right
 * thing to do.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name> <name>__init</name></type> <name>blacklist_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>bl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>key_restriction</name></name> <modifier>*</modifier></type><name>restriction</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>register_key_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_type_blacklist</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>panic</name><argument_list>(<argument><expr><literal type="string">"Can't allocate system blacklist key type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>restriction</name> <operator>=</operator> <call><name>kzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>restriction</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>GFP_KERNEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>restriction</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>panic</name><argument_list>(<argument><expr><literal type="string">"Can't allocate blacklist keyring restriction\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>restriction</name><operator>-&gt;</operator><name>check</name></name> <operator>=</operator> <name>restrict_link_for_blacklist</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>blacklist_keyring</name> <operator>=</operator>
		<call><name>keyring_alloc</name><argument_list>(<argument><expr><literal type="string">".blacklist"</literal></expr></argument>,
			      <argument><expr><name>GLOBAL_ROOT_UID</name></expr></argument>, <argument><expr><name>GLOBAL_ROOT_GID</name></expr></argument>, <argument><expr><call><name>current_cred</name><argument_list>()</argument_list></call></expr></argument>,
			      <argument><expr><name>KEY_POS_VIEW</name> <operator>|</operator> <name>KEY_POS_READ</name> <operator>|</operator> <name>KEY_POS_SEARCH</name> <operator>|</operator>
			      <name>KEY_POS_WRITE</name> <operator>|</operator>
			      <name>KEY_USR_VIEW</name> <operator>|</operator> <name>KEY_USR_READ</name> <operator>|</operator> <name>KEY_USR_SEARCH</name>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONFIG_SYSTEM_BLACKLIST_AUTH_UPDATE</name></cpp:ifdef>
			      <operator>|</operator> <name>KEY_USR_WRITE</name></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			      , <argument><expr><name>KEY_ALLOC_NOT_IN_QUOTA</name> <operator>|</operator>
			      <name>KEY_ALLOC_SET_KEEP</name></expr></argument>,
			      <argument><expr><name>restriction</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>blacklist_keyring</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>panic</name><argument_list>(<argument><expr><literal type="string">"Can't allocate system blacklist keyring\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>bl</name> <operator>=</operator> <name>blacklist_hashes</name></expr>;</init> <condition><expr><operator>*</operator><name>bl</name></expr>;</condition> <incr><expr><name>bl</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>mark_raw_hash_blacklisted</name><argument_list>(<argument><expr><operator>*</operator><name>bl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pr_err</name><argument_list>(<argument><expr><literal type="string">"- blacklisting failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Must be initialised before we try and load the keys into the keyring.
 */</comment>
<expr_stmt><expr><call><name>device_initcall</name><argument_list>(<argument><expr><name>blacklist_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONFIG_SYSTEM_REVOCATION_LIST</name></cpp:ifdef>
<comment type="block">/*
 * Load the compiled-in list of revocation X.509 certificates.
 */</comment>
<function><type><specifier>static</specifier> <name>__init</name> <name>int</name></type> <name>load_revocation_certificate_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>revocation_certificate_list_size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pr_notice</name><argument_list>(<argument><expr><literal type="string">"Loading compiled-in revocation X.509 certificates\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>x509_load_certificate_list</name><argument_list>(<argument><expr><name>revocation_certificate_list</name></expr></argument>,
					  <argument><expr><name>revocation_certificate_list_size</name></expr></argument>,
					  <argument><expr><name>blacklist_keyring</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><call><name>late_initcall</name><argument_list>(<argument><expr><name>load_revocation_certificate_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="certs/blacklist.h" hash="2946281ce229065a53d7fc297e7f8ad79dd170e0"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/kernel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypto/pkcs7.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <name>__initconst</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>blacklist_hashes</name><index>[]</index></name></decl>;</decl_stmt>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="certs/blacklist_hashes.c" hash="b40595abace153ec151ff9e27d083358cb687921"><comment type="line">// SPDX-License-Identifier: GPL-2.0</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blacklist.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <name>__initconst</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>blacklist_hashes</name><index>[]</index></name> <init>= <expr><block>{
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blacklist_hash_list"</cpp:file></cpp:include>
}</block></expr></init></decl>;</decl_stmt>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="certs/extract-cert.c" hash="f0b25f59035cb7b3d37d46bc1b21177359e86ec4"><comment type="block">/* Extract X.509 certificate in DER form from PKCS#11 or PEM.
 *
 * Copyright Â© 2014-2015 Red Hat, Inc. All Rights Reserved.
 * Copyright Â© 2015      Intel Corporation.
 *
 * Authors: David Howells &lt;dhowells@redhat.com&gt;
 *          David Woodhouse &lt;dwmw2@infradead.org&gt;
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the licence, or (at your option) any later version.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/bio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/pem.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_MAJOR</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>USE_PKCS11_PROVIDER</name></cpp:macro></cpp:define>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/provider.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/store.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_ENGINE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_DEPRECATED_3_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>USE_PKCS11_ENGINE</name></cpp:macro></cpp:define>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/engine.h&gt;</cpp:file></cpp:include>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl-common.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PKEY_ID_PKCS7</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<expr_stmt><expr><specifier>static</specifier> <macro><name>__attribute__</name><argument_list>(<argument>(noreturn)</argument>)</argument_list></macro>
<name>void</name> <macro><name>format</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<block>{
	<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
		<argument><expr><literal type="string">"Usage: extract-cert &lt;source&gt; &lt;dest&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;
	<expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>key_pass</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>BIO</name> <modifier>*</modifier></type><name>wb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>cert_dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>verbose</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_cert</name><parameter_list>(<parameter><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wb</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>wb</name> <operator>=</operator> <call><name>BIO_new_file</name><argument_list>(<argument><expr><name>cert_dst</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><operator>!</operator><name>wb</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>cert_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>X509_NAME_oneline</name><argument_list>(<argument><expr><call><name>X509_get_subject_name</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><operator>!</operator><call><name>i2d_X509_bio</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>cert_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Extracted cert: %s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>X509</name> <modifier>*</modifier></type><name>load_cert_pkcs11</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cert_src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>cert</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PKCS11_PROVIDER</name></cpp:ifdef>
	<decl_stmt><decl><type><name>OSSL_STORE_CTX</name> <modifier>*</modifier></type><name>store</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OSSL_PROVIDER_try_load</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pkcs11"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"OSSL_PROVIDER_try_load(pkcs11)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OSSL_PROVIDER_try_load</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"OSSL_PROVIDER_try_load(default)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>store</name> <operator>=</operator> <call><name>OSSL_STORE_open</name><argument_list>(<argument><expr><name>cert_src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><operator>!</operator><name>store</name></expr></argument>, <argument><expr><literal type="string">"OSSL_STORE_open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>!</operator><call><name>OSSL_STORE_eof</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>OSSL_STORE_INFO</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>OSSL_STORE_load</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>drain_openssl_errors</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>OSSL_STORE_INFO_get_type</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OSSL_STORE_INFO_CERT</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>cert</name> <operator>=</operator> <call><name>OSSL_STORE_INFO_get1_CERT</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><operator>!</operator><name>cert</name></expr></argument>, <argument><expr><literal type="string">"OSSL_STORE_INFO_get1_CERT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>OSSL_STORE_INFO_free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cert</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>OSSL_STORE_close</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PKCS11_ENGINE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<decl_stmt><decl><type><name>ENGINE</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
		<struct>struct <block>{
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cert_id</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>cert</name></decl>;</decl_stmt>
		}</block> <decl><name>parms</name></decl>;</struct>

		<expr_stmt><expr><name><name>parms</name><operator>.</operator><name>cert_id</name></name> <operator>=</operator> <name>cert_src</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parms</name><operator>.</operator><name>cert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ENGINE_load_builtin_engines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>drain_openssl_errors</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>ENGINE_by_id</name><argument_list>(<argument><expr><literal type="string">"pkcs11"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><operator>!</operator><name>e</name></expr></argument>, <argument><expr><literal type="string">"Load PKCS#11 ENGINE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ENGINE_init</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>drain_openssl_errors</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ENGINE_init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>key_pass</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><operator>!</operator><call><name>ENGINE_ctrl_cmd_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"PIN"</literal></expr></argument>, <argument><expr><name>key_pass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Set PKCS#11 PIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>ENGINE_ctrl_cmd</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"LOAD_CERT_CTRL"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parms</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><operator>!</operator><name><name>parms</name><operator>.</operator><name>cert</name></name></expr></argument>, <argument><expr><literal type="string">"Get X.509 from PKCS#11"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cert</name> <operator>=</operator> <name><name>parms</name><operator>.</operator><name>cert</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"no pkcs11 engine/provider available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>cert</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cert_src</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>verbose_env</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>OpenSSL_add_all_algorithms</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ERR_load_crypto_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>verbose_env</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"KBUILD_VERBOSE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>verbose_env</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>verbose_env</name></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>verbose</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>key_pass</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"KBUILD_SIGN_PIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>format</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>cert_src</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cert_dst</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cert_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Invoked with no input; create empty file */</comment>
		<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>cert_dst</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><operator>!</operator><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>cert_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>cert_src</name></expr></argument>, <argument><expr><literal type="string">"pkcs11:"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>cert</name> <init>= <expr><call><name>load_cert_pkcs11</name><argument_list>(<argument><expr><name>cert_src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><operator>!</operator><name>cert</name></expr></argument>, <argument><expr><literal type="string">"load_cert_pkcs11 failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>write_cert</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>BIO_new_file</name><argument_list>(<argument><expr><name>cert_src</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><operator>!</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>cert_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>x509</name> <operator>=</operator> <call><name>PEM_read_bio_X509</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>wb</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>x509</name></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>err</name> <init>= <expr><call><name>ERR_peek_last_error</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>ERR_GET_LIB</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ERR_LIB_PEM</name> <operator>&amp;&amp;</operator>
				    <call><name>ERR_GET_REASON</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PEM_R_NO_START_LINE</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><operator>!</operator><name>x509</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>cert_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>write_cert</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="certs/system_keyring.c" hash="eb9bd48f92139b8be55d83d07bf2986ec0188b50"><comment type="line">// SPDX-License-Identifier: GPL-2.0-or-later</comment>
<comment type="block">/* System trusted keyring for trusted public keys
 *
 * Copyright (C) 2012 Red Hat, Inc. All Rights Reserved.
 * Written by David Howells (dhowells@redhat.com)
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/export.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/kernel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/sched.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/cred.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/slab.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/uidgid.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/verification.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;keys/asymmetric-type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;keys/system_keyring.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypto/pkcs7.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>builtin_trusted_keys</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONFIG_SECONDARY_TRUSTED_KEYRING</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>secondary_trusted_keys</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONFIG_INTEGRITY_MACHINE_KEYRING</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>machine_trusted_keys</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONFIG_INTEGRITY_PLATFORM_KEYRING</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>platform_trusted_keys</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__initconst</name> <specifier>const</specifier> <name>u8</name></type> <name><name>system_certificate_list</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>__initconst</name> <specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>system_certificate_list_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>__initconst</name> <specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>module_cert_size</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * restrict_link_by_builtin_trusted - Restrict keyring addition by built-in CA
 * @dest_keyring: Keyring being linked to.
 * @type: The type of key being added.
 * @payload: The payload of the new key.
 * @restriction_key: A ring of keys that can be used to vouch for the new cert.
 *
 * Restrict the addition of keys into a keyring based on the key-to-be-added
 * being vouched for by a key in the built in system keyring.
 */</comment>
<function><type><name>int</name></type> <name>restrict_link_by_builtin_trusted</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>dest_keyring</name></decl></parameter>,
				     <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>key_type</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
				     <parameter><decl><type><specifier>const</specifier> <name><name>union</name> <name>key_payload</name></name> <modifier>*</modifier></type><name>payload</name></decl></parameter>,
				     <parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>restriction_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>restrict_link_by_signature</name><argument_list>(<argument><expr><name>dest_keyring</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>,
					  <argument><expr><name>builtin_trusted_keys</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * restrict_link_by_digsig_builtin - Restrict digitalSignature key additions by the built-in keyring
 * @dest_keyring: Keyring being linked to.
 * @type: The type of key being added.
 * @payload: The payload of the new key.
 * @restriction_key: A ring of keys that can be used to vouch for the new cert.
 *
 * Restrict the addition of keys into a keyring based on the key-to-be-added
 * being vouched for by a key in the built in system keyring. The new key
 * must have the digitalSignature usage field set.
 */</comment>
<function><type><name>int</name></type> <name>restrict_link_by_digsig_builtin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>dest_keyring</name></decl></parameter>,
				    <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>key_type</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
				    <parameter><decl><type><specifier>const</specifier> <name><name>union</name> <name>key_payload</name></name> <modifier>*</modifier></type><name>payload</name></decl></parameter>,
				    <parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>restriction_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>restrict_link_by_digsig</name><argument_list>(<argument><expr><name>dest_keyring</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>,
				       <argument><expr><name>builtin_trusted_keys</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONFIG_SECONDARY_TRUSTED_KEYRING</name></cpp:ifdef>
<comment type="block" format="doxygen">/**
 * restrict_link_by_builtin_and_secondary_trusted - Restrict keyring
 *   addition by both built-in and secondary keyrings.
 * @dest_keyring: Keyring being linked to.
 * @type: The type of key being added.
 * @payload: The payload of the new key.
 * @restrict_key: A ring of keys that can be used to vouch for the new cert.
 *
 * Restrict the addition of keys into a keyring based on the key-to-be-added
 * being vouched for by a key in either the built-in or the secondary system
 * keyrings.
 */</comment>
<function><type><name>int</name></type> <name>restrict_link_by_builtin_and_secondary_trusted</name><parameter_list>(
	<parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>dest_keyring</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>key_type</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name><name>union</name> <name>key_payload</name></name> <modifier>*</modifier></type><name>payload</name></decl></parameter>,
	<parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>restrict_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* If we have a secondary trusted keyring, then that contains a link
	 * through to the builtin keyring and the search will follow that link.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <operator>&amp;</operator><name>key_type_keyring</name> <operator>&amp;&amp;</operator>
	    <name>dest_keyring</name> <operator>==</operator> <name>secondary_trusted_keys</name> <operator>&amp;&amp;</operator>
	    <name>payload</name> <operator>==</operator> <operator>&amp;</operator><name><name>builtin_trusted_keys</name><operator>-&gt;</operator><name>payload</name></name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* Allow the builtin keyring to be added to the secondary */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>restrict_link_by_signature</name><argument_list>(<argument><expr><name>dest_keyring</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>,
					  <argument><expr><name>secondary_trusted_keys</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * restrict_link_by_digsig_builtin_and_secondary - Restrict by digitalSignature.
 * @dest_keyring: Keyring being linked to.
 * @type: The type of key being added.
 * @payload: The payload of the new key.
 * @restrict_key: A ring of keys that can be used to vouch for the new cert.
 *
 * Restrict the addition of keys into a keyring based on the key-to-be-added
 * being vouched for by a key in either the built-in or the secondary system
 * keyrings. The new key must have the digitalSignature usage field set.
 */</comment>
<function><type><name>int</name></type> <name>restrict_link_by_digsig_builtin_and_secondary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>dest_keyring</name></decl></parameter>,
						  <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>key_type</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
						  <parameter><decl><type><specifier>const</specifier> <name><name>union</name> <name>key_payload</name></name> <modifier>*</modifier></type><name>payload</name></decl></parameter>,
						  <parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>restrict_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* If we have a secondary trusted keyring, then that contains a link
	 * through to the builtin keyring and the search will follow that link.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <operator>&amp;</operator><name>key_type_keyring</name> <operator>&amp;&amp;</operator>
	    <name>dest_keyring</name> <operator>==</operator> <name>secondary_trusted_keys</name> <operator>&amp;&amp;</operator>
	    <name>payload</name> <operator>==</operator> <operator>&amp;</operator><name><name>builtin_trusted_keys</name><operator>-&gt;</operator><name>payload</name></name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* Allow the builtin keyring to be added to the secondary */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>restrict_link_by_digsig</name><argument_list>(<argument><expr><name>dest_keyring</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>,
				       <argument><expr><name>secondary_trusted_keys</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Allocate a struct key_restriction for the "builtin and secondary trust"
 * keyring. Only for use in system_trusted_keyring_init().
 */</comment>
<expr_stmt><expr><specifier>static</specifier> <name>__init</name> struct <name>key_restriction</name> <operator>*</operator><macro><name>get_builtin_and_secondary_restriction</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<block>{
	struct <expr><name>key_restriction</name> <operator>*</operator><name>restriction</name></expr>;

	<expr><name>restriction</name> <operator>=</operator> <call><name>kzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>key_restriction</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>GFP_KERNEL</name></expr></argument>)</argument_list></call></expr>;

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>restriction</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>panic</name><argument_list>(<argument><expr><literal type="string">"Can't allocate secondary trusted keyring restriction\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IS_ENABLED</name><argument_list>(<argument><expr><name>CONFIG_INTEGRITY_MACHINE_KEYRING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>restriction</name><operator>-&gt;</operator><name>check</name></name> <operator>=</operator> <name>restrict_link_by_builtin_secondary_and_machine</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>restriction</name><operator>-&gt;</operator><name>check</name></name> <operator>=</operator> <name>restrict_link_by_builtin_and_secondary_trusted</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>restriction</name></expr>;</return>
}

<comment type="block" format="doxygen">/**
 * add_to_secondary_keyring - Add to secondary keyring.
 * @source: Source of key
 * @data: The blob holding the key
 * @len: The length of the data blob
 *
 * Add a key to the secondary keyring. The key must be vouched for by a key in the builtin,
 * machine or secondary keyring itself.
 */</comment>
void <function><type><name>__init</name></type> <name>add_to_secondary_keyring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>key_ref_t</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>key_perm_t</name></type> <name>perm</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>perm</name> <operator>=</operator> <operator>(</operator><name>KEY_POS_ALL</name> <operator>&amp;</operator> <operator>~</operator><name>KEY_POS_SETATTR</name><operator>)</operator> <operator>|</operator> <name>KEY_USR_VIEW</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>key_create_or_update</name><argument_list>(<argument><expr><call><name>make_key_ref</name><argument_list>(<argument><expr><name>secondary_trusted_keys</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><literal type="string">"asymmetric"</literal></expr></argument>,
				   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>,
				   <argument><expr><name>KEY_ALLOC_NOT_IN_QUOTA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>pr_err</name><argument_list>(<argument><expr><literal type="string">"Problem loading X.509 certificate from %s to secondary keyring %ld\n"</literal></expr></argument>,
		       <argument><expr><name>source</name></expr></argument>, <argument><expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pr_notice</name><argument_list>(<argument><expr><literal type="string">"Loaded X.509 cert '%s'\n"</literal></expr></argument>, <argument><expr><call><name>key_ref_to_ptr</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>key_ref_put</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONFIG_INTEGRITY_MACHINE_KEYRING</name></cpp:ifdef>
<function><type><name>void</name> <name>__init</name></type> <name>set_machine_trusted_keys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>keyring</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>machine_trusted_keys</name> <operator>=</operator> <name>keyring</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>key_link</name><argument_list>(<argument><expr><name>secondary_trusted_keys</name></expr></argument>, <argument><expr><name>machine_trusted_keys</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>panic</name><argument_list>(<argument><expr><literal type="string">"Can't link (machine) trusted keyrings\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * restrict_link_by_builtin_secondary_and_machine - Restrict keyring addition.
 * @dest_keyring: Keyring being linked to.
 * @type: The type of key being added.
 * @payload: The payload of the new key.
 * @restrict_key: A ring of keys that can be used to vouch for the new cert.
 *
 * Restrict the addition of keys into a keyring based on the key-to-be-added
 * being vouched for by a key in either the built-in, the secondary, or
 * the machine keyrings.
 */</comment>
<function><type><name>int</name></type> <name>restrict_link_by_builtin_secondary_and_machine</name><parameter_list>(
	<parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>dest_keyring</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>key_type</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name><name>union</name> <name>key_payload</name></name> <modifier>*</modifier></type><name>payload</name></decl></parameter>,
	<parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>restrict_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>machine_trusted_keys</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <operator>&amp;</operator><name>key_type_keyring</name> <operator>&amp;&amp;</operator>
	    <name>dest_keyring</name> <operator>==</operator> <name>secondary_trusted_keys</name> <operator>&amp;&amp;</operator>
	    <name>payload</name> <operator>==</operator> <operator>&amp;</operator><name><name>machine_trusted_keys</name><operator>-&gt;</operator><name>payload</name></name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* Allow the machine keyring to be added to the secondary */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>restrict_link_by_builtin_and_secondary_trusted</name><argument_list>(<argument><expr><name>dest_keyring</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
							      <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>restrict_key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Create the trusted keyrings
 */</comment>
<function><type><specifier>static</specifier> <name>__init</name> <name>int</name></type> <name>system_trusted_keyring_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pr_notice</name><argument_list>(<argument><expr><literal type="string">"Initialise system trusted keyrings\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>builtin_trusted_keys</name> <operator>=</operator>
		<call><name>keyring_alloc</name><argument_list>(<argument><expr><literal type="string">".builtin_trusted_keys"</literal></expr></argument>,
			      <argument><expr><name>GLOBAL_ROOT_UID</name></expr></argument>, <argument><expr><name>GLOBAL_ROOT_GID</name></expr></argument>, <argument><expr><call><name>current_cred</name><argument_list>()</argument_list></call></expr></argument>,
			      <argument><expr><operator>(</operator><operator>(</operator><name>KEY_POS_ALL</name> <operator>&amp;</operator> <operator>~</operator><name>KEY_POS_SETATTR</name><operator>)</operator> <operator>|</operator>
			      <name>KEY_USR_VIEW</name> <operator>|</operator> <name>KEY_USR_READ</name> <operator>|</operator> <name>KEY_USR_SEARCH</name><operator>)</operator></expr></argument>,
			      <argument><expr><name>KEY_ALLOC_NOT_IN_QUOTA</name></expr></argument>,
			      <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>builtin_trusted_keys</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>panic</name><argument_list>(<argument><expr><literal type="string">"Can't allocate builtin trusted keyring\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONFIG_SECONDARY_TRUSTED_KEYRING</name></cpp:ifdef>
	<expr_stmt><expr><name>secondary_trusted_keys</name> <operator>=</operator>
		<call><name>keyring_alloc</name><argument_list>(<argument><expr><literal type="string">".secondary_trusted_keys"</literal></expr></argument>,
			      <argument><expr><name>GLOBAL_ROOT_UID</name></expr></argument>, <argument><expr><name>GLOBAL_ROOT_GID</name></expr></argument>, <argument><expr><call><name>current_cred</name><argument_list>()</argument_list></call></expr></argument>,
			      <argument><expr><operator>(</operator><operator>(</operator><name>KEY_POS_ALL</name> <operator>&amp;</operator> <operator>~</operator><name>KEY_POS_SETATTR</name><operator>)</operator> <operator>|</operator>
			       <name>KEY_USR_VIEW</name> <operator>|</operator> <name>KEY_USR_READ</name> <operator>|</operator> <name>KEY_USR_SEARCH</name> <operator>|</operator>
			       <name>KEY_USR_WRITE</name><operator>)</operator></expr></argument>,
			      <argument><expr><name>KEY_ALLOC_NOT_IN_QUOTA</name></expr></argument>,
			      <argument><expr><call><name>get_builtin_and_secondary_restriction</name><argument_list>()</argument_list></call></expr></argument>,
			      <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>secondary_trusted_keys</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>panic</name><argument_list>(<argument><expr><literal type="string">"Can't allocate secondary trusted keyring\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>key_link</name><argument_list>(<argument><expr><name>secondary_trusted_keys</name></expr></argument>, <argument><expr><name>builtin_trusted_keys</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>panic</name><argument_list>(<argument><expr><literal type="string">"Can't link trusted keyrings\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Must be initialised before we try and load the keys into the keyring.
 */</comment>
<expr_stmt><expr><call><name>device_initcall</name><argument_list>(<argument><expr><name>system_trusted_keyring_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>__init</name> <name>int</name></type> <name>load_module_cert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>keyring</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_ENABLED</name><argument_list>(<argument><expr><name>CONFIG_IMA_APPRAISE_MODSIG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pr_notice</name><argument_list>(<argument><expr><literal type="string">"Loading compiled-in module X.509 certificates\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>x509_load_certificate_list</name><argument_list>(<argument><expr><name>system_certificate_list</name></expr></argument>,
					  <argument><expr><name>module_cert_size</name></expr></argument>, <argument><expr><name>keyring</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Load the compiled-in list of X.509 certificates.
 */</comment>
<function><type><specifier>static</specifier> <name>__init</name> <name>int</name></type> <name>load_system_certificate_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pr_notice</name><argument_list>(<argument><expr><literal type="string">"Loading compiled-in X.509 certificates\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONFIG_MODULE_SIG</name></cpp:ifdef>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>system_certificate_list</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <name>system_certificate_list_size</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>system_certificate_list</name> <operator>+</operator> <name>module_cert_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <name>system_certificate_list_size</name> <operator>-</operator> <name>module_cert_size</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><call><name>x509_load_certificate_list</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>builtin_trusted_keys</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><call><name>late_initcall</name><argument_list>(<argument><expr><name>load_system_certificate_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONFIG_SYSTEM_DATA_VERIFICATION</name></cpp:ifdef>

<comment type="block" format="doxygen">/**
 * verify_pkcs7_message_sig - Verify a PKCS#7-based signature on system data.
 * @data: The data to be verified (NULL if expecting internal data).
 * @len: Size of @data.
 * @pkcs7: The PKCS#7 message that is the signature.
 * @trusted_keys: Trusted keys to use (NULL for builtin trusted keys only,
 *					(void *)1UL for all trusted keys).
 * @usage: The use to which the key is being put.
 * @view_content: Callback to gain access to content.
 * @ctx: Context for callback.
 */</comment>
<function><type><name>int</name></type> <name>verify_pkcs7_message_sig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
			     <parameter><decl><type><name><name>struct</name> <name>pkcs7_message</name></name> <modifier>*</modifier></type><name>pkcs7</name></decl></parameter>,
			     <parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>trusted_keys</name></decl></parameter>,
			     <parameter><decl><type><name><name>enum</name> <name>key_being_used_for</name></name></type> <name>usage</name></decl></parameter>,
			     <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>view_content</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
						 <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
						 <parameter><decl><type><name>size_t</name></type> <name>asn1hdrlen</name></decl></parameter>)</parameter_list></function_decl></parameter>,
			     <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<comment type="block">/* The data should be detached - so we need to supply it. */</comment>
	<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <call><name>pkcs7_supply_detached_data</name><argument_list>(<argument><expr><name>pkcs7</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>pr_err</name><argument_list>(<argument><expr><literal type="string">"PKCS#7 signature with non-detached data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><name>EBADMSG</name></expr>;</expr_stmt>
		<goto>goto <name>error</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pkcs7_verify</name><argument_list>(<argument><expr><name>pkcs7</name></expr></argument>, <argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>is_key_on_revocation_list</name><argument_list>(<argument><expr><name>pkcs7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><name>ENOKEY</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>pr_devel</name><argument_list>(<argument><expr><literal type="string">"PKCS#7 key is on revocation list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>error</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trusted_keys</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>trusted_keys</name> <operator>=</operator> <name>builtin_trusted_keys</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>trusted_keys</name> <operator>==</operator> <name>VERIFY_USE_SECONDARY_KEYRING</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONFIG_SECONDARY_TRUSTED_KEYRING</name></cpp:ifdef>
		<expr_stmt><expr><name>trusted_keys</name> <operator>=</operator> <name>secondary_trusted_keys</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>trusted_keys</name> <operator>=</operator> <name>builtin_trusted_keys</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>trusted_keys</name> <operator>==</operator> <name>VERIFY_USE_PLATFORM_KEYRING</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONFIG_INTEGRITY_PLATFORM_KEYRING</name></cpp:ifdef>
		<expr_stmt><expr><name>trusted_keys</name> <operator>=</operator> <name>platform_trusted_keys</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>trusted_keys</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trusted_keys</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><name>ENOKEY</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pr_devel</name><argument_list>(<argument><expr><literal type="string">"PKCS#7 platform keyring is not available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>error</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pkcs7_validate_trust</name><argument_list>(<argument><expr><name>pkcs7</name></expr></argument>, <argument><expr><name>trusted_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><name>ENOKEY</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pr_devel</name><argument_list>(<argument><expr><literal type="string">"PKCS#7 signature not signed with a trusted key\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<goto>goto <name>error</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>view_content</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>asn1hdrlen</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pkcs7_get_content_data</name><argument_list>(<argument><expr><name>pkcs7</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asn1hdrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><name>ENODATA</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pr_devel</name><argument_list>(<argument><expr><literal type="string">"PKCS#7 message does not contain data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<goto>goto <name>error</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>view_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>asn1hdrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<label><name>error</name>:</label>
	<expr_stmt><expr><call><name>pr_devel</name><argument_list>(<argument><expr><literal type="string">"&lt;==%s() = %d\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * verify_pkcs7_signature - Verify a PKCS#7-based signature on system data.
 * @data: The data to be verified (NULL if expecting internal data).
 * @len: Size of @data.
 * @raw_pkcs7: The PKCS#7 message that is the signature.
 * @pkcs7_len: The size of @raw_pkcs7.
 * @trusted_keys: Trusted keys to use (NULL for builtin trusted keys only,
 *					(void *)1UL for all trusted keys).
 * @usage: The use to which the key is being put.
 * @view_content: Callback to gain access to content.
 * @ctx: Context for callback.
 */</comment>
<function><type><name>int</name></type> <name>verify_pkcs7_signature</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
			   <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>raw_pkcs7</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pkcs7_len</name></decl></parameter>,
			   <parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>trusted_keys</name></decl></parameter>,
			   <parameter><decl><type><name><name>enum</name> <name>key_being_used_for</name></name></type> <name>usage</name></decl></parameter>,
			   <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>view_content</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
					       <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
					       <parameter><decl><type><name>size_t</name></type> <name>asn1hdrlen</name></decl></parameter>)</parameter_list></function_decl></parameter>,
			   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>pkcs7_message</name></name> <modifier>*</modifier></type><name>pkcs7</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pkcs7</name> <operator>=</operator> <call><name>pkcs7_parse_message</name><argument_list>(<argument><expr><name>raw_pkcs7</name></expr></argument>, <argument><expr><name>pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>pkcs7</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>pkcs7</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>verify_pkcs7_message_sig</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pkcs7</name></expr></argument>, <argument><expr><name>trusted_keys</name></expr></argument>, <argument><expr><name>usage</name></expr></argument>,
				       <argument><expr><name>view_content</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pkcs7_free_message</name><argument_list>(<argument><expr><name>pkcs7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pr_devel</name><argument_list>(<argument><expr><literal type="string">"&lt;==%s() = %d\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><call><name>EXPORT_SYMBOL_GPL</name><argument_list>(<argument><expr><name>verify_pkcs7_signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CONFIG_SYSTEM_DATA_VERIFICATION */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONFIG_INTEGRITY_PLATFORM_KEYRING</name></cpp:ifdef>
<function><type><name>void</name> <name>__init</name></type> <name>set_platform_trusted_keys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>keyring</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>platform_trusted_keys</name> <operator>=</operator> <name>keyring</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

</unit>
